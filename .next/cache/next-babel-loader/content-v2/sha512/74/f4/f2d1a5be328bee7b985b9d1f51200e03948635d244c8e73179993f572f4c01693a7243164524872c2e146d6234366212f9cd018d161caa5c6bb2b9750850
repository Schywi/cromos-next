{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    _defineProperty(this, \"greet\", () => {\n      const message = this.createChatBotMessage(\"Hello friend.\");\n      this.addMessageToState(message);\n    });\n\n    _defineProperty(this, \"tooling\", () => {\n      const message = this.createChatBotMessage(\"Excelente, qual tipo de serviço você deseja ?\", {\n        widget: \"options2\"\n      });\n      this.addMessageToState(message);\n    });\n\n    _defineProperty(this, \"machining\", () => {\n      const message = this.createChatBotMessage(\"Excelente, qual tipo de serviço você deseja ?\", {\n        widget: \"options3\"\n      });\n      this.addMessageToState(message);\n    });\n\n    _defineProperty(this, \"hidraulyc\", () => {\n      const message = this.createChatBotMessage(\"Excelente, qual tipo de serviço você deseja ?\", {\n        widget: \"options4\"\n      });\n      this.addMessageToState(message);\n    });\n\n    _defineProperty(this, \"contact\", () => {\n      const message = this.createChatBotMessage(\"Certo, entrarei em contato com a equipe,  mas antes, por favor preencha o formulario de contato\");\n      this.addMessageToState(message);\n    });\n\n    _defineProperty(this, \"handleJavascriptQuiz\", () => {\n      const message = this.createChatBotMessage(\"Excelente, qual tipo de serviço você deseja ?\", {\n        widget: \"options2\"\n      });\n      this.addMessageToState(message);\n    });\n\n    _defineProperty(this, \"addMessageToState\", message => {\n      this.setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n        messages: [...prevState.messages, message]\n      }));\n    });\n\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  } // functions that executes when user type\n\n\n}\n\nexport default ActionProvider;","map":{"version":3,"sources":["/home/lucas/home/lucas/www/udemy/my-projects/cromos-chat/cromos-next/components/chatbot/ActionProvider.js"],"names":["ActionProvider","constructor","createChatBotMessage","setStateFunc","message","addMessageToState","widget","setState","prevState","messages"],"mappings":";;;;;;AAAA,MAAMA,cAAN,CAAqB;AACnBC,EAAAA,WAAW,CAACC,oBAAD,EAAuBC,YAAvB,EAAqC;AAAA,mCAOxC,MAAM;AACZ,YAAMC,OAAO,GAAG,KAAKF,oBAAL,CAA0B,eAA1B,CAAhB;AACA,WAAKG,iBAAL,CAAuBD,OAAvB;AACD,KAV+C;;AAAA,qCAatC,MAAM;AACd,YAAMA,OAAO,GAAG,KAAKF,oBAAL,CACd,+CADc,EAEd;AACEI,QAAAA,MAAM,EAAE;AADV,OAFc,CAAhB;AAMA,WAAKD,iBAAL,CAAuBD,OAAvB;AACD,KArB+C;;AAAA,uCAuBlC,MAAM;AAChB,YAAMA,OAAO,GAAG,KAAKF,oBAAL,CACd,+CADc,EAEd;AACEI,QAAAA,MAAM,EAAE;AADV,OAFc,CAAhB;AAMA,WAAKD,iBAAL,CAAuBD,OAAvB;AACD,KA/B6C;;AAAA,uCAiChC,MAAM;AAChB,YAAMA,OAAO,GAAG,KAAKF,oBAAL,CACd,+CADc,EAEd;AACEI,QAAAA,MAAM,EAAE;AADV,OAFc,CAAhB;AAMA,WAAKD,iBAAL,CAAuBD,OAAvB;AACD,KAzC2C;;AAAA,qCA2ClC,MAAM;AACd,YAAMA,OAAO,GAAG,KAAKF,oBAAL,CACd,iGADc,CAAhB;AAIA,WAAKG,iBAAL,CAAuBD,OAAvB;AACD,KAjD2C;;AAAA,kDAwDzB,MAAM;AAC3B,YAAMA,OAAO,GAAG,KAAKF,oBAAL,CACd,+CADc,EAEd;AACEI,QAAAA,MAAM,EAAE;AADV,OAFc,CAAhB;AAQA,WAAKD,iBAAL,CAAuBD,OAAvB;AACD,KAlE+C;;AAAA,+CAoE3BA,OAAD,IAAa;AAC/B,WAAKG,QAAL,CAAeC,SAAD,oCACTA,SADS;AAEZC,QAAAA,QAAQ,EAAE,CAAC,GAAGD,SAAS,CAACC,QAAd,EAAwBL,OAAxB;AAFE,QAAd;AAID,KAzE+C;;AAC9C,SAAKF,oBAAL,GAA4BA,oBAA5B;AACA,SAAKK,QAAL,GAAgBJ,YAAhB;AACD,GAJkB,CAOnB;;;AAPmB;;AA6ErB,eAAeH,cAAf","sourcesContent":["class ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n\n\n  // functions that executes when user type\n  greet = () => {\n    const message = this.createChatBotMessage(\"Hello friend.\");\n    this.addMessageToState(message);\n  };\n\n\n  tooling = () => {\n    const message = this.createChatBotMessage(\n      \"Excelente, qual tipo de serviço você deseja ?\",\n      {\n        widget: \"options2\",\n      }\n    );\n    this.addMessageToState(message);\n  } ;\n\n    machining = () => {\n      const message = this.createChatBotMessage(\n        \"Excelente, qual tipo de serviço você deseja ?\",\n        {\n          widget: \"options3\",\n        }\n      );   \n      this.addMessageToState(message);\n    } ;\n\n      hidraulyc = () => {\n        const message = this.createChatBotMessage(\n          \"Excelente, qual tipo de serviço você deseja ?\",\n          {\n            widget: \"options4\",\n          }\n        );\n        this.addMessageToState(message);\n      };\n\n      contact = () => {\n        const message = this.createChatBotMessage(\n          \"Certo, entrarei em contato com a equipe,  mas antes, por favor preencha o formulario de contato\",\n\n        );\n        this.addMessageToState(message);\n      };\n    \n\n  \n\n\n\n  handleJavascriptQuiz = () => {\n    const message = this.createChatBotMessage(\n      \"Excelente, qual tipo de serviço você deseja ?\",\n      {\n        widget: \"options2\",\n      }\n    );\n    \n\n    this.addMessageToState(message);\n  };\n\n  addMessageToState = (message) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      messages: [...prevState.messages, message],\n    }));\n  };\n}\n\nexport default ActionProvider;\n"]},"metadata":{},"sourceType":"module"}