{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/lucas/home/lucas/www/udemy/my-projects/cromos-chat/cromos-next/components/chatbot/config.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport dynamic from 'next/dynamic';\nconst createChatBotMessage = dynamic(() => import(\"react-chatbot-kit\").then(mod => mod.Line), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"react-chatbot-kit\")],\n    modules: [\"react-chatbot-kit\"]\n  }\n});\nimport Options from \"./Options/Options\";\nimport Options2 from \"./Options/Options2\";\nimport Options3 from \"./Options/Options3\";\nimport Options4 from \"./Options/Options4\";\nimport Quiz from \"./Quiz/Quiz\";\nimport removeChat from './removeChat';\nconst config = {\n  botName: `Cromos bot `,\n  initialMessages: [createChatBotMessage(`Olá, em que posso ajudar?`, {\n    widget: \"options\"\n  })],\n  widgets: [{\n    widgetName: \"options\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(Options, _objectSpread({}, props), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 30\n    }, this)\n  }, {\n    widgetName: \"options2\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(Options2, _objectSpread({}, props), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 30\n    }, this)\n  }, {\n    widgetName: \"options3\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(Options3, _objectSpread({}, props), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 30\n    }, this)\n  }, {\n    widgetName: \"options4\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(Options4, _objectSpread({}, props), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 30\n    }, this)\n  }, {\n    widgetName: \"javascriptQuiz\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(Quiz, _objectSpread({}, props), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 30\n    }, this),\n    props: {\n      questions: [{\n        question: \"What is closure?\",\n        answer: \"Closure is a way for a function to retain access to it's enclosing function scope after the execution of that function is finished.\",\n        id: 1\n      }, {\n        question: \"Explain prototypal inheritance\",\n        answer: \"Prototypal inheritance is a link between an object and an object store that holds shared properties. If a property is not found on the host object, javascript will check the prototype object.\",\n        id: 2\n      }]\n    }\n  }]\n};\nexport default config;","map":{"version":3,"sources":["/home/lucas/home/lucas/www/udemy/my-projects/cromos-chat/cromos-next/components/chatbot/config.js"],"names":["React","dynamic","createChatBotMessage","then","mod","Line","ssr","Options","Options2","Options3","Options4","Quiz","removeChat","config","botName","initialMessages","widget","widgets","widgetName","widgetFunc","props","questions","question","answer","id"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,cAApB;AAGA,MAAMC,oBAAoB,GAAGD,OAAO,CAClC,MAAM,OAAO,mBAAP,EAA4BE,IAA5B,CAAkCC,GAAD,IAASA,GAAG,CAACC,IAA9C,CAD4B,EAElC;AAAEC,EAAAA,GAAG,EAAE,KAAP;AAAA;AAAA,wCADa,mBACb;AAAA,cADa,mBACb;AAAA;AAAA,CAFkC,CAApC;AAKA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAG,aADG;AAEbC,EAAAA,eAAe,EAAE,CACfb,oBAAoB,CAAE,2BAAF,EAA8B;AAChDc,IAAAA,MAAM,EAAE;AADwC,GAA9B,CADL,CAFJ;AAObC,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,SADd;AAEEC,IAAAA,UAAU,EAAGC,KAAD,iBAAW,QAAC,OAAD,oBAAaA,KAAb;AAAA;AAAA;AAAA;AAAA;AAFzB,GADO,EAKP;AACEF,IAAAA,UAAU,EAAE,UADd;AAEEC,IAAAA,UAAU,EAAGC,KAAD,iBAAW,QAAC,QAAD,oBAAcA,KAAd;AAAA;AAAA;AAAA;AAAA;AAFzB,GALO,EASP;AACEF,IAAAA,UAAU,EAAE,UADd;AAEEC,IAAAA,UAAU,EAAGC,KAAD,iBAAW,QAAC,QAAD,oBAAcA,KAAd;AAAA;AAAA;AAAA;AAAA;AAFzB,GATO,EAaP;AACEF,IAAAA,UAAU,EAAE,UADd;AAEEC,IAAAA,UAAU,EAAGC,KAAD,iBAAW,QAAC,QAAD,oBAAcA,KAAd;AAAA;AAAA;AAAA;AAAA;AAFzB,GAbO,EAiBP;AACEF,IAAAA,UAAU,EAAE,gBADd;AAEEC,IAAAA,UAAU,EAAGC,KAAD,iBAAW,QAAC,IAAD,oBAAUA,KAAV;AAAA;AAAA;AAAA;AAAA,YAFzB;AAGEA,IAAAA,KAAK,EAAE;AACLC,MAAAA,SAAS,EAAE,CACT;AACEC,QAAAA,QAAQ,EAAE,kBADZ;AAEEC,QAAAA,MAAM,EACJ,qIAHJ;AAIEC,QAAAA,EAAE,EAAE;AAJN,OADS,EAOT;AACEF,QAAAA,QAAQ,EAAE,gCADZ;AAEEC,QAAAA,MAAM,EACJ,iMAHJ;AAIEC,QAAAA,EAAE,EAAE;AAJN,OAPS;AADN;AAHT,GAjBO;AAPI,CAAf;AA+CA,eAAeX,MAAf","sourcesContent":["import React from \"react\";\nimport dynamic from 'next/dynamic';\n \n\nconst createChatBotMessage = dynamic(\n  () => import(\"react-chatbot-kit\").then((mod) => mod.Line),\n  { ssr: false }\n)\n\nimport Options from \"./Options/Options\";\nimport Options2 from \"./Options/Options2\";\nimport Options3 from \"./Options/Options3\";\nimport Options4 from \"./Options/Options4\";\nimport Quiz from \"./Quiz/Quiz\";\nimport removeChat from './removeChat';\n\nconst config = {\n  botName: `Cromos bot `,\n  initialMessages: [\n    createChatBotMessage(`Olá, em que posso ajudar?`, {\n      widget: \"options\",\n    }),\n  ],\n  widgets: [\n    {\n      widgetName: \"options\",\n      widgetFunc: (props) => <Options {...props} />,\n    },\n    {\n      widgetName: \"options2\",\n      widgetFunc: (props) => <Options2 {...props} />,\n    },\n    {\n      widgetName: \"options3\",\n      widgetFunc: (props) => <Options3 {...props} />,\n    },\n    {\n      widgetName: \"options4\",\n      widgetFunc: (props) => <Options4 {...props} />,\n    },\n    {\n      widgetName: \"javascriptQuiz\",\n      widgetFunc: (props) => <Quiz {...props} />,\n      props: {\n        questions: [\n          {\n            question: \"What is closure?\",\n            answer:\n              \"Closure is a way for a function to retain access to it's enclosing function scope after the execution of that function is finished.\",\n            id: 1,\n          },\n          {\n            question: \"Explain prototypal inheritance\",\n            answer:\n              \"Prototypal inheritance is a link between an object and an object store that holds shared properties. If a property is not found on the host object, javascript will check the prototype object.\",\n            id: 2,\n          },\n        ],\n      },\n    },\n  ],\n};\n\nexport default config;\n"]},"metadata":{},"sourceType":"module"}